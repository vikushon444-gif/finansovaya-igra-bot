
bot-full.py
# –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ò–≥—Ä–∞ - Telegram Bot
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
# Python 3.10+

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import aiosqlite

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = "8224609039:AAH_0u2_LDxVSJ3h13bsUldsNqg4gyn6dFA"
DB_PATH = "financial_game.db"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ==================== FSM STATES ====================
class OnboardingStates(StatesGroup):
    waiting_for_debts_answer = State()
    waiting_for_debt_name = State()
    waiting_for_debt_amount = State()
    waiting_for_debt_rate = State()
    waiting_for_debt_payment = State()
    waiting_for_debt_date = State()
    waiting_for_strategy = State()
    waiting_for_income = State()
    waiting_for_account_type = State()
    waiting_for_account_name = State()
    waiting_for_account_balance = State()

class ExpenseStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()
    waiting_for_description = State()

class IncomeStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_description = State()

class AccountStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_name = State()
    waiting_for_balance = State()

class DebtStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_amount = State()
    waiting_for_rate = State()
    waiting_for_payment = State()
    waiting_for_date = State()

class DebtPaymentStates(StatesGroup):
    waiting_for_debt_selection = State()
    waiting_for_amount = State()

class GoalStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_name = State()
    waiting_for_amount = State()

# ==================== –ö–û–ù–°–¢–ê–ù–¢–´ ====================
CATEGORIES = {
    '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ (50%)': ['–ü—Ä–æ–¥—É–∫—Ç—ã üõí', '–ñ–∏–ª—å—ë –∏ –ñ–ö–• üè†', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöó', '–ú–µ–¥–∏—Ü–∏–Ω–∞ üíä', '–°–≤—è–∑—å üì±', '–û–¥–µ–∂–¥–∞ üëï', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üìö'],
    '–ñ–µ–ª–∞–µ–º–æ–µ (30%)': ['–†–µ—Å—Ç–æ—Ä–∞–Ω—ã üçΩÔ∏è', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üé¨', '–ü–æ–¥–ø–∏—Å–∫–∏ üì∫', '–°–ø–æ—Ä—Ç üí™', '–ö—Ä–∞—Å–æ—Ç–∞ üíÖ', '–•–æ–±–±–∏ üé®', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚úàÔ∏è', '–®–æ–ø–∏–Ω–≥ üõçÔ∏è'],
    '–°–±–µ—Ä–µ–∂–µ–Ω–∏—è (20%)': ['–ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ üí∞', '–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤ üí≥', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ üìà', '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è üéØ']
}

LEVELS = [
    {"level": 1, "name": "üî¥ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ", "score": 0},
    {"level": 2, "name": "üü† –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –≤—ã–∂–∏–≤–∞–Ω–∏–µ", "score": 400},
    {"level": 3, "name": "üü° –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "score": 1400},
    {"level": 4, "name": "üü¢ –†–æ—Å—Ç –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "score": 3400},
    {"level": 5, "name": "üîµ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "score": 5400},
    {"level": 6, "name": "üíé –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–±–æ–¥–∞", "score": 9400}
]

ACCOUNT_TYPES = ['–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ üí≥', '–ù–∞–ª–∏—á–Ω—ã–µ üíµ', '–î–µ–ø–æ–∑–∏—Ç üè¶', '–ê–∫—Ç–∏–≤ üìä']
GOAL_TYPES = ['–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞ üí≥', '–ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ üí∞', '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è üíé', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ üìà']

# ==================== DATABASE ====================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            current_level INTEGER DEFAULT 1,
            total_score INTEGER DEFAULT 0,
            monthly_income REAL DEFAULT 0,
            onboarding_completed BOOLEAN DEFAULT 0,
            debt_strategy TEXT
        )''')
        
        await db.execute('''CREATE TABLE IF NOT EXISTS accounts (
            account_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            account_type TEXT NOT NULL,
            account_name TEXT NOT NULL,
            balance REAL DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''')
        
        await db.execute('''CREATE TABLE IF NOT EXISTS transactions (
            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            account_id INTEGER,
            amount REAL NOT NULL,
            transaction_type TEXT NOT NULL,
            category TEXT,
            description TEXT,
            transaction_date DATE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''')
        
        await db.execute('''CREATE TABLE IF NOT EXISTS debts (
            debt_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            debt_name TEXT NOT NULL,
            total_amount REAL NOT NULL,
            remaining_amount REAL NOT NULL,
            interest_rate REAL DEFAULT 0,
            minimum_payment REAL DEFAULT 0,
            due_date DATE,
            status TEXT DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''')
        
        await db.execute('''CREATE TABLE IF NOT EXISTS goals (
            goal_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            goal_type TEXT NOT NULL,
            goal_name TEXT NOT NULL,
            target_amount REAL NOT NULL,
            current_amount REAL DEFAULT 0,
            status TEXT DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''')
        
        await db.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# ==================== HELPERS ====================
async def get_user(chat_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('SELECT * FROM users WHERE chat_id = ?', (chat_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return {'user_id': row[0], 'chat_id': row[1], 'username': row[2], 'first_name': row[3],
                        'current_level': row[5], 'total_score': row[6], 'monthly_income': row[7],
                        'onboarding_completed': row[8], 'debt_strategy': row[9]}
    return None

async def create_user(chat_id: int, username: str, first_name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('INSERT INTO users (chat_id, username, first_name) VALUES (?, ?, ?)',
                        (chat_id, username, first_name))
        await db.commit()

async def add_score(user_id: int, points: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('UPDATE users SET total_score = total_score + ? WHERE user_id = ?', (points, user_id))
        await db.commit()
        
        async with db.execute('SELECT total_score, current_level FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                score, current_level = row[0], row[1]
                for level_data in LEVELS:
                    if level_data['level'] > current_level and score >= level_data['score']:
                        await db.execute('UPDATE users SET current_level = ? WHERE user_id = ?', (level_data['level'], user_id))
                        await db.commit()
                        return level_data
    return None

def format_money(amount: float) -> str:
    return f"{amount:,.0f}".replace(',', ' ') + " ‚ÇΩ"

def get_level_data(level_number: int):
    for level in LEVELS:
        if level['level'] == level_number:
            return level
    return LEVELS[0]

def create_category_keyboard():
    buttons = []
    for group, cats in CATEGORIES.items():
        for cat in cats:
            buttons.append([InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ==================== HANDLERS ====================

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    
    if not user:
        await create_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        await message.answer(
            "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—É—é –ò–≥—Ä—É!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å –æ—Ç –¥–æ–ª–≥–æ–≤ –¥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã —á–µ—Ä–µ–∑ 6 —É—Ä–æ–≤–Ω–µ–π —Ä–æ—Å—Ç–∞.\n\n"
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
        )
        
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]], resize_keyboard=True)
        await message.answer("üìä –£ –≤–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –¥–æ–ª–≥–∏ –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã?", reply_markup=keyboard)
        await state.set_state(OnboardingStates.waiting_for_debts_answer)
    else:
        if not user['onboarding_completed']:
            await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É!")
            keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]], resize_keyboard=True)
            await message.answer("üìä –£ –≤–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –¥–æ–ª–≥–∏ –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã?", reply_markup=keyboard)
            await state.set_state(OnboardingStates.waiting_for_debts_answer)
        else:
            level_data = get_level_data(user['current_level'])
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}! üëã\n\n"
                f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_data['name']}\n"
                f"–û—á–∫–∏: {user['total_score']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
                reply_markup=ReplyKeyboardRemove()
            )

@router.message(OnboardingStates.waiting_for_debts_answer)
async def process_debts_answer(message: Message, state: FSMContext):
    if message.text == "–î–∞":
        await message.answer("–î–æ–±–∞–≤–∏–º –≤–∞—à –ø–µ—Ä–≤—ã–π –¥–æ–ª–≥.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–µ–¥–∏—Ç –≤ –±–∞–Ω–∫–µ, –ó–∞–π–º —É –¥—Ä—É–≥–∞):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(OnboardingStates.waiting_for_debt_name)
    else:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤. üéâ\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ä–µ–¥–Ω–∏–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(OnboardingStates.waiting_for_income)

@router.message(OnboardingStates.waiting_for_debt_name)
async def process_debt_name(message: Message, state: FSMContext):
    await state.update_data(debt_name=message.text)
    await message.answer("–ö–∞–∫–∞—è –æ–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞? (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
    await state.set_state(OnboardingStates.waiting_for_debt_amount)

@router.message(OnboardingStates.waiting_for_debt_amount)
async def process_debt_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(' ', '').replace(',', '.'))
        await state.update_data(debt_amount=amount)
        await message.answer("–ö–∞–∫–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –¥–æ–ª–≥—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.5)")
        await state.set_state(OnboardingStates.waiting_for_debt_rate)
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")

@router.message(OnboardingStates.waiting_for_debt_rate)
async def process_debt_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text.replace(',', '.'))
        await state.update_data(debt_rate=rate)
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂? (—Ü–∏—Ñ—Ä—ã)")
        await state.set_state(OnboardingStates.waiting_for_debt_payment)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É")

@router.message(OnboardingStates.waiting_for_debt_payment)
async def process_debt_payment(message: Message, state: FSMContext):
    try:
        payment = float(message.text.replace(' ', '').replace(',', '.'))
        await state.update_data(debt_payment=payment)
        await message.answer("–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂? (–¥–µ–Ω—å –º–µ—Å—è—Ü–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15)")
        await state.set_state(OnboardingStates.waiting_for_debt_date)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞")

@router.message(OnboardingStates.waiting_for_debt_date)
async def process_debt_date(message: Message, state: FSMContext):
    try:
        day = int(message.text)
        if 1 <= day <= 31:
            data = await state.get_data()
            user = await get_user(message.from_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–ª–≥
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute(
                    'INSERT INTO debts (user_id, debt_name, total_amount, remaining_amount, interest_rate, minimum_payment, due_date, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                    (user['user_id'], data['debt_name'], data['debt_amount'], data['debt_amount'], data['debt_rate'], data['debt_payment'], day, 'active')
                )
                await db.commit()
            
            await add_score(user['user_id'], 100)
            await message.answer(f"‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω: {data['debt_name']} ‚Äî {format_money(data['debt_amount'])}\n\n+100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞!")
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üî• –õ–∞–≤–∏–Ω–∞ (–≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏)", callback_data="strategy_avalanche")],
                [InlineKeyboardButton(text="‚ùÑÔ∏è –°–Ω–µ–∂–Ω—ã–π –∫–æ–º (–º–∞–ª–µ–Ω—å–∫–∏–µ –¥–æ–ª–≥–∏)", callback_data="strategy_snowball")],
                [InlineKeyboardButton(text="‚ö°Ô∏è –ì–∏–±—Ä–∏–¥", callback_data="strategy_hybrid")]
            ])
            await message.answer(
                "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤:\n\n"
                "üî• –õ–∞–≤–∏–Ω–∞ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –¥–æ–ª–≥–∏ —Å –≤—ã—Å–æ–∫–æ–π —Å—Ç–∞–≤–∫–æ–π\n"
                "‚ùÑÔ∏è –°–Ω–µ–∂–Ω—ã–π –∫–æ–º ‚Äî —Å–Ω–∞—á–∞–ª–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–æ–ª–≥–∏\n"
                "‚ö°Ô∏è –ì–∏–±—Ä–∏–¥ ‚Äî –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –æ–±–µ–∏—Ö",
                reply_markup=keyboard
            )
            await state.set_state(OnboardingStates.waiting_for_strategy)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –æ—Ç 1 –¥–æ 31")
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞")

@router.callback_query(OnboardingStates.waiting_for_strategy)
async def process_strategy(callback: CallbackQuery, state: FSMContext):
    strategy = callback.data.replace('strategy_', '')
    user = await get_user(callback.from_user.id)
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('UPDATE users SET debt_strategy = ? WHERE user_id = ?', (strategy, user['user_id']))
        await db.commit()
    
    await callback.message.edit_text(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±—Ä–∞–Ω–∞: {strategy}")
    await callback.message.answer("üíµ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ä–µ–¥–Ω–∏–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(OnboardingStates.waiting_for_income)

@router.message(OnboardingStates.waiting_for_income)
async def process_income(message: Message, state: FSMContext):
    try:
        income = float(message.text.replace(' ', '').replace(',', '.'))
        user = await get_user(message.from_user.id)
        
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute('UPDATE users SET monthly_income = ? WHERE user_id = ?', (income, user['user_id']))
            await db.commit()
        
        await add_score(user['user_id'], 50)
        
        necessary = income * 0.5
        desired = income * 0.3
        savings = income * 0.2
        
        await message.answer(
            f"‚úÖ –î–æ—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {format_money(income)}\n\n"
            f"üìä –ë—é–¥–∂–µ—Ç 50/30/20:\n"
            f"‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ (50%): {format_money(necessary)}\n"
            f"‚Ä¢ –ñ–µ–ª–∞–µ–º–æ–µ (30%): {format_money(desired)}\n"
            f"‚Ä¢ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è (20%): {format_money(savings)}\n\n"
            f"+50 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="acc_card")],
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="acc_cash")],
            [InlineKeyboardButton(text="üè¶ –î–µ–ø–æ–∑–∏—Ç", callback_data="acc_deposit")]
        ])
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π —Å—á—ë—Ç:", reply_markup=keyboard)
        await state.set_state(OnboardingStates.waiting_for_account_type)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞")

@router.callback_query(OnboardingStates.waiting_for_account_type)
async def process_account_type(callback: CallbackQuery, state: FSMContext):
    acc_type = callback.data.replace('acc_', '')
    type_names = {'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 'cash': '–ù–∞–ª–∏—á–Ω—ã–µ', 'deposit': '–î–µ–ø–æ–∑–∏—Ç'}
    await state.update_data(account_type=type_names.get(acc_type, '–°—á—ë—Ç'))
    await callback.message.edit_text(f"‚úÖ –¢–∏–ø: {type_names.get(acc_type)}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞, –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è):")
    await state.set_state(OnboardingStates.waiting_for_account_name)

@router.message(OnboardingStates.waiting_for_account_name)
async def process_account_name(message: Message, state: FSMContext):
    await state.update_data(account_name=message.text)
    await message.answer("–ö–∞–∫–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ —ç—Ç–æ–º —Å—á—ë—Ç–µ? (—Ü–∏—Ñ—Ä—ã)")
    await state.set_state(OnboardingStates.waiting_for_account_balance)

@router.message(OnboardingStates.waiting_for_account_balance)
async def process_account_balance(message: Message, state: FSMContext):
    try:
        balance = float(message.text.replace(' ', '').replace(',', '.'))
        data = await state.get_data()
        user = await get_user(message.from_user.id)
        
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                'INSERT INTO accounts (user_id, account_type, account_name, balance) VALUES (?, ?, ?, ?)',
                (user['user_id'], data['account_type'], data['account_name'], balance)
            )
            await db.execute('UPDATE users SET onboarding_completed = 1 WHERE user_id = ?', (user['user_id'],))
            await db.commit()
        
        await add_score(user['user_id'], 50)
        
        user = await get_user(message.from_user.id)
        level_data = get_level_data(user['current_level'])
        
        await message.answer(
            f"üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_data['name']}\n"
            f"–û—á–∫–∏: {user['total_score']}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /level –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        )
        await state.clear()
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = '''üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
/add_expense - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
/add_income - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
/add_account - –î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç
/accounts - –ú–æ–∏ —Å—á–µ—Ç–∞
/budget - –ë—é–¥–∂–µ—Ç 50/30/20

üí≥ –î–æ–ª–≥–∏:
/add_debt - –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥
/debts - –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤
/pay_debt - –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂

üéØ –¶–µ–ª–∏ –∏ —É—Ä–æ–≤–Ω–∏:
/goals - –ú–æ–∏ —Ü–µ–ª–∏
/add_goal - –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å
/level - –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
/progress - –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å

üìä –û—Ç—á—ë—Ç—ã:
/summary - –°–≤–æ–¥–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí° –ü—Ä–æ—á–µ–µ:
/motivation - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞'''
    
    await message.answer(help_text)

@router.message(Command("add_expense"))
async def cmd_add_expense(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user or not user['onboarding_completed']:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: /start")
        return
    
    await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(ExpenseStates.waiting_for_amount)

@router.message(ExpenseStates.waiting_for_amount)
async def process_expense_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(' ', '').replace(',', '.'))
        await state.update_data(amount=amount)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=create_category_keyboard())
        await state.set_state(ExpenseStates.waiting_for_category)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

@router.callback_query(ExpenseStates.waiting_for_category)
async def process_expense_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.replace('cat_', '')
    await state.update_data(category=category)
    await callback.message.edit_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="desc_yes")],
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="desc_no")]
    ])
    await callback.message.answer("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=keyboard)
    await state.set_state(ExpenseStates.waiting_for_description)

@router.callback_query(ExpenseStates.waiting_for_description)
async def process_expense_description_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "desc_no":
        await save_expense(callback.message, state, "")
    else:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")
        await state.set_state(ExpenseStates.waiting_for_description)

@router.message(ExpenseStates.waiting_for_description)
async def process_expense_description_text(message: Message, state: FSMContext):
    await save_expense(message, state, message.text)

async def save_expense(message: Message, state: FSMContext, description: str):
    data = await state.get_data()
    user = await get_user(message.from_user.id if hasattr(message, 'from_user') else message.chat.id)
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'INSERT INTO transactions (user_id, amount, transaction_type, category, description, transaction_date) VALUES (?, ?, ?, ?, ?, ?)',
            (user['user_id'], data['amount'], 'expense', data['category'], description, datetime.now().date())
        )
        await db.commit()
    
    new_level = await add_score(user['user_id'], 10)
    
    response = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {format_money(data['amount'])}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n\n+10 –æ—á–∫–æ–≤!"
    
    if new_level:
        response += f"\n\nüéâ –ù–û–í–´–ô –£–†–û–í–ï–ù–¨!\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏: {new_level['name']}!"
    
    await message.answer(response)
    await state.clear()

@router.message(Command("add_income"))
async def cmd_add_income(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user or not user['onboarding_completed']:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: /start")
        return
    
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    await state.set_state(IncomeStates.waiting_for_amount)

@router.message(IncomeStates.waiting_for_amount)
async def process_income_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(' ', '').replace(',', '.'))
        await state.update_data(amount=amount)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="inc_desc_yes")],
            [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="inc_desc_no")]
        ])
        await message.answer("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=keyboard)
        await state.set_state(IncomeStates.waiting_for_description)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

@router.callback_query(IncomeStates.waiting_for_description)
async def process_income_description_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "inc_desc_no":
        await save_income(callback.message, state, "")
    else:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞:")

@router.message(IncomeStates.waiting_for_description)
async def process_income_description_text(message: Message, state: FSMContext):
    await save_income(message, state, message.text)

async def save_income(message: Message, state: FSMContext, description: str):
    data = await state.get_data()
    user = await get_user(message.from_user.id if hasattr(message, 'from_user') else message.chat.id)
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'INSERT INTO transactions (user_id, amount, transaction_type, category, description, transaction_date) VALUES (?, ?, ?, ?, ?, ?)',
            (user['user_id'], data['amount'], 'income', '–î–æ—Ö–æ–¥', description, datetime.now().date())
        )
        await db.commit()
    
    new_level = await add_score(user['user_id'], 10)
    
    response = f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {format_money(data['amount'])}\n\n+10 –æ—á–∫–æ–≤!"
    
    if new_level:
        response += f"\n\nüéâ –ù–û–í–´–ô –£–†–û–í–ï–ù–¨!\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏: {new_level['name']}!"
    
    await message.answer(response)
    await state.clear()

@router.message(Command("accounts"))
async def cmd_accounts(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('SELECT account_type, account_name, balance FROM accounts WHERE user_id = ?', (user['user_id'],)) as cursor:
            accounts = await cursor.fetchall()
    
    if not accounts:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π: /add_account")
        return
    
    total = sum(acc[2] for acc in accounts)
    response = "üí≥ –í–∞—à–∏ —Å—á–µ—Ç–∞:\n\n"
    for acc in accounts:
        response += f"{acc[0]}: {acc[1]}\n–ë–∞–ª–∞–Ω—Å: {format_money(acc[2])}\n\n"
    response += f"üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_money(total)}"
    
    await message.answer(response)

@router.message(Command("debts"))
async def cmd_debts(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            'SELECT debt_name, total_amount, remaining_amount, interest_rate, minimum_payment, due_date FROM debts WHERE user_id = ? AND status = ?',
            (user['user_id'], 'active')
        ) as cursor:
            debts = await cursor.fetchall()
    
    if not debts:
        await message.answer("üéâ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!\n\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        return
    
    total_debt = sum(d[2] for d in debts)
    response = "üí≥ –í–∞—à–∏ –¥–æ–ª–≥–∏:\n\n"
    
    for debt in debts:
        progress = ((debt[1] - debt[2]) / debt[1]) * 100
        response += f"üìç {debt[0]}\n"
        response += f"–û—Å—Ç–∞–ª–æ—Å—å: {format_money(debt[2])} –∏–∑ {format_money(debt[1])}\n"
        response += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
        response += f"–°—Ç–∞–≤–∫–∞: {debt[3]}%\n"
        response += f"–ú–∏–Ω. –ø–ª–∞—Ç—ë–∂: {format_money(debt[4])}\n"
        response += f"–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂: {debt[5]} —á–∏—Å–ª–∞\n\n"
    
    response += f"üìä –í—Å–µ–≥–æ –¥–æ–ª–≥–æ–≤: {format_money(total_debt)}\n\n"
    response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay_debt –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
    
    await message.answer(response)

@router.message(Command("goals"))
async def cmd_goals(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            'SELECT goal_type, goal_name, target_amount, current_amount FROM goals WHERE user_id = ? AND status = ?',
            (user['user_id'], 'active')
        ) as cursor:
            goals = await cursor.fetchall()
    
    if not goals:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é: /add_goal")
        return
    
    response = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
    
    for goal in goals:
        progress = (goal[3] / goal[2]) * 100
        remaining = goal[2] - goal[3]
        response += f"{goal[0]}\n"
        response += f"üìå {goal[1]}\n"
        response += f"–¶–µ–ª—å: {format_money(goal[2])}\n"
        response += f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {format_money(goal[3])} ({progress:.1f}%)\n"
        response += f"–û—Å—Ç–∞–ª–æ—Å—å: {format_money(remaining)}\n\n"
    
    await message.answer(response)

@router.message(Command("level"))
async def cmd_level(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    level_data = get_level_data(user['current_level'])
    next_level = None
    if user['current_level'] < len(LEVELS):
        next_level = LEVELS[user['current_level']]
    
    response = f"{level_data['name']}\n\n"
    response += f"üíé –í–∞—à–∏ –æ—á–∫–∏: {user['total_score']}"
    
    if next_level:
        needed = next_level['score'] - user['total_score']
        progress = (user['total_score'] / next_level['score']) * 100
        response += f" / {next_level['score']}\n"
        response += f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {needed} –æ—á–∫–æ–≤ ({progress:.1f}%)\n\n"
        response += f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {next_level['name']}"
    else:
        response += "\n\nüèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–æ–π!"
    
    await message.answer(response)

@router.message(Command("budget"))
async def cmd_budget(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if user['monthly_income'] == 0:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return
    
    income = user['monthly_income']
    necessary = income * 0.5
    desired = income * 0.3
    savings = income * 0.2
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    async with aiosqlite.connect(DB_PATH) as db:
        start_of_month = datetime.now().replace(day=1).date()
        async with db.execute(
            'SELECT category, SUM(amount) FROM transactions WHERE user_id = ? AND transaction_type = ? AND transaction_date >= ? GROUP BY category',
            (user['user_id'], 'expense', start_of_month)
        ) as cursor:
            expenses = await cursor.fetchall()
    
    spent_necessary = 0
    spent_desired = 0
    spent_savings = 0
    
    for cat, amount in expenses:
        if any(c in cat for c in CATEGORIES['–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ (50%)']):
            spent_necessary += amount
        elif any(c in cat for c in CATEGORIES['–ñ–µ–ª–∞–µ–º–æ–µ (30%)']):
            spent_desired += amount
        elif any(c in cat for c in CATEGORIES['–°–±–µ—Ä–µ–∂–µ–Ω–∏—è (20%)']):
            spent_savings += amount
    
    response = f"üìä –ë—é–¥–∂–µ—Ç 50/30/20\n–î–æ—Ö–æ–¥: {format_money(income)}\n\n"
    
    response += f"üè† –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ (50%)\n"
    response += f"–õ–∏–º–∏—Ç: {format_money(necessary)}\n"
    response += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_money(spent_necessary)}\n"
    response += f"–û—Å—Ç–∞—Ç–æ–∫: {format_money(necessary - spent_necessary)}\n\n"
    
    response += f"üé¨ –ñ–µ–ª–∞–µ–º–æ–µ (30%)\n"
    response += f"–õ–∏–º–∏—Ç: {format_money(desired)}\n"
    response += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_money(spent_desired)}\n"
    response += f"–û—Å—Ç–∞—Ç–æ–∫: {format_money(desired - spent_desired)}\n\n"
    
    response += f"üí∞ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è (20%)\n"
    response += f"–¶–µ–ª—å: {format_money(savings)}\n"
    response += f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {format_money(spent_savings)}\n"
    response += f"–û—Å—Ç–∞–ª–æ—Å—å: {format_money(savings - spent_savings)}"
    
    await message.answer(response)

@router.message(Command("summary"))
async def cmd_summary(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    async with aiosqlite.connect(DB_PATH) as db:
        start_of_month = datetime.now().replace(day=1).date()
        
        async with db.execute(
            'SELECT SUM(amount) FROM transactions WHERE user_id = ? AND transaction_type = ? AND transaction_date >= ?',
            (user['user_id'], 'income', start_of_month)
        ) as cursor:
            income_row = await cursor.fetchone()
            total_income = income_row[0] if income_row[0] else 0
        
        async with db.execute(
            'SELECT SUM(amount) FROM transactions WHERE user_id = ? AND transaction_type = ? AND transaction_date >= ?',
            (user['user_id'], 'expense', start_of_month)
        ) as cursor:
            expense_row = await cursor.fetchone()
            total_expense = expense_row[0] if expense_row[0] else 0
    
    balance = total_income - total_expense
    
    response = f"üìä –°–≤–æ–¥–∫–∞ –∑–∞ {datetime.now().strftime('%B %Y')}\n\n"
    response += f"üí∞ –î–æ—Ö–æ–¥—ã: {format_money(total_income)}\n"
    response += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {format_money(total_expense)}\n"
    response += f"{'üìà' if balance >= 0 else 'üìâ'} –ë–∞–ª–∞–Ω—Å: {format_money(balance)}\n\n"
    
    if balance >= 0:
        response += "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –≤ –ø–ª—é—Å–µ!"
    else:
        response += "‚ö†Ô∏è –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ—Ö–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±—é–¥–∂–µ—Ç: /budget"
    
    await message.answer(response)

@router.message(Command("motivation"))
async def cmd_motivation(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    motivations = {
        1: ["üí° –û—Å–æ–∑–Ω–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî —ç—Ç–æ —É–∂–µ 50% –ø—É—Ç–∏ –∫ –µ—ë —Ä–µ—à–µ–Ω–∏—é!", "üåü –í—ã —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ!"],
        2: ["üí™ –í—ã —É–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã—à–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!", "üéØ –ö–∞–∂–¥—ã–π –∑–∞–∫—Ä—ã—Ç—ã–π –¥–æ–ª–≥ ‚Äî —ç—Ç–æ –≤–∞—à–∞ –ø–æ–±–µ–¥–∞!"],
        3: ["üéâ –î–æ–ª–≥–∏ —Ç–∞—é—Ç –Ω–∞ –≥–ª–∞–∑–∞—Ö! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!", "üí∞ –í–∞—à–∞ –ø–æ–¥—É—à–∫–∞ —Ä–∞—Å—Ç—ë—Ç ‚Äî —ç—Ç–æ –≤–∞—à–∞ –∑–∞—â–∏—Ç–∞!"],
        4: ["üöÄ –í—ã –ø–µ—Ä–µ—à–ª–∏ –æ—Ç –≤—ã–∂–∏–≤–∞–Ω–∏—è –∫ —Ä–æ—Å—Ç—É!", "üìà –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç, –ø–æ–∫–∞ –≤—ã —Å–ø–∏—Ç–µ!"],
        5: ["üëë –í—ã –≤ —Ç–æ–ø-5% –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏!", "üí∞ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —Ä–∞—Å—Ç—ë—Ç ‚Äî —Å–∫–æ—Ä–æ –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞!"],
        6: ["üëë –í–´ –°–î–ï–õ–ê–õ–ò –≠–¢–û! –ü–æ–ª–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–±–æ–¥–∞!", "üåü –í–∞—à –ø—É—Ç—å ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è —Ç—ã—Å—è—á!"]
    }
    
    import random
    level = user['current_level']
    motivation = random.choice(motivations.get(level, motivations[1]))
    
    await message.answer(motivation)

@router.message(Command("progress"))
async def cmd_progress(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('SELECT COUNT(*) FROM transactions WHERE user_id = ?', (user['user_id'],)) as cursor:
            trans_count = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM debts WHERE user_id = ? AND status = ?', (user['user_id'], 'active')) as cursor:
            debts_count = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM goals WHERE user_id = ? AND status = ?', (user['user_id'], 'active')) as cursor:
            goals_count = (await cursor.fetchone())[0]
    
    level_data = get_level_data(user['current_level'])
    
    response = f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
    response += f"–£—Ä–æ–≤–µ–Ω—å: {level_data['name']}\n"
    response += f"–û—á–∫–∏ –æ–ø—ã—Ç–∞: {user['total_score']}\n\n"
    response += f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {trans_count}\n"
    response += f"üí≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {debts_count}\n"
    response += f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {goals_count}\n\n"
    response += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    
    await message.answer(response)

# ==================== MAIN ====================
async def main():
    await init_db()
    dp.include_router(router)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
